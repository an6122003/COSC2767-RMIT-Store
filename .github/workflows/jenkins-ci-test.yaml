name: Jenkins CI BE

on:
  pull_request:
    branches:
      - main
    paths:
      - 'server/**'
  workflow_dispatch:

jobs:
  trigger-jenkins:
    runs-on: ubuntu-latest

    steps:
      - name: Trigger Jenkins Job
        id: trigger
        run: |
          # Define variables
          JOB_NAME="ASM2-Pipeline"
          JENKINS_URL="${{ secrets.JENKINS_URL }}"
          USER="${{ secrets.JENKINS_USER }}"
          API_TOKEN="${{ secrets.JENKINS_API_TOKEN }}"

          # Get Jenkins Crumb
          CRUMB=$(curl -s --user "${USER}:${API_TOKEN}" "${JENKINS_URL}/crumbIssuer/api/json" | jq -r '.crumb')

          # Trigger Jenkins job and get queue item
          QUEUE_URL=$(curl -X POST "${JENKINS_URL}/job/${JOB_NAME}/buildWithParameters" \
            --user "${USER}:${API_TOKEN}" \
            -H "Jenkins-Crumb:${CRUMB}" \
            -H "Content-Type: application/json" \
            --data-urlencode "pr_number=${{ github.event.pull_request.number }}" \
            --data-urlencode "pr_branch=${{ github.head_ref }}" \
            --write-out "%{redirect_url}")

          echo "QUEUE_URL=${QUEUE_URL}" >> $GITHUB_ENV

      - name: Wait for Jenkins Job Result
        id: wait
        run: |
          # Wait logic
          JENKINS_URL="${{ secrets.JENKINS_URL }}"
          USER="${{ secrets.JENKINS_USER }}"
          API_TOKEN="${{ secrets.JENKINS_API_TOKEN }}"
          TIMEOUT=600  # 10 minutes
          INTERVAL=15  # Check every 15 seconds

          BUILD_STATUS=""
          BUILD_URL=""

          echo "Waiting for Jenkins job to start..."
          until [ "$BUILD_URL" ]; do
            sleep "$INTERVAL"
            TIMEOUT=$((TIMEOUT - INTERVAL))
            if [ "$TIMEOUT" -le 0 ]; then
              echo "Timed out waiting for job to start." >&2
              exit 1
            fi

            BUILD_URL=$(curl -s "${QUEUE_URL}/api/json" \
              --user "${USER}:${API_TOKEN}" | jq -r '.executable.url // empty')
          done

          echo "Job started: $BUILD_URL"

          echo "Waiting for job to complete..."
          until [ "$BUILD_STATUS" ]; do
            sleep "$INTERVAL"
            BUILD_STATUS=$(curl -s "${BUILD_URL}api/json" \
              --user "${USER}:${API_TOKEN}" | jq -r '.result // empty')
          done

          if [ "$BUILD_STATUS" = "SUCCESS" ]; then
            echo "Jenkins job succeeded!"
          else
            echo "Jenkins job failed or did not complete successfully!" >&2
            exit 1
          fi
